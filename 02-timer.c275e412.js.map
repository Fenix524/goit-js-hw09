{"mappings":"6DAAA,I,EAuCAA,EAAeC,UChCf,SAASC,EAAeC,G,IAAQC,IAAAC,UAAAC,OAAA,YAAAD,UAAA,KAAaA,UAAA,GAC3CF,EAAOI,SAAWH,C,CCk2CpBI,EAASC,SD/1CF,IAAMC,EAAY,CAACC,eAAAT,EAAgBU,mBAX1C,SAA4BT,GAAQ,QAAAU,EAAAR,UAAAC,OAAAQ,EAAA,IAAAC,MAAAF,EAAA,EAAAA,EAAA,EAAU,GAAVG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,EAAA,GAAAX,UAAAW,GAClCF,EAAQG,SAAQ,SAACC,GACfhB,EAAegB,GAAI,E,IAErBhB,EAAeC,GAAQ,E,OEezBgB,EAAeC,WAAa,CAACC,eAnBtB,SAAwBC,GAE7B,IACMC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EAWZ,MAAO,CAAEE,KARIC,KAAKC,MAAMP,EAAKI,GAQdI,MANDF,KAAKC,MAAMP,EAAMI,EAAOD,GAMhBM,QAJNH,KAAKC,MAAMP,EAAOI,EAAOD,EAAQF,GAIlBS,QAFfJ,KAAKC,MAAMP,EAAQI,EAAOD,EAAQF,EAZnC,K,GCOXU,EAAWC,SAASC,cAAc,sBAClCC,EAAmBF,SAASC,cAAc,oBAE1CE,EAAYH,SAASC,cAAc,mCACnCG,EAAaJ,SAASC,cAAc,oCACpCI,EAAeL,SAASC,cAAc,sCACtCK,EAAeN,SAASC,cAAc,sCAGxCM,EAAY,KAChBR,EAAS1B,UAAW,EAkBpBP,EAAUoC,EAhBM,CACdM,YAAY,EACZC,WAAW,EACXC,YAAa,IAAIC,KACjBC,gBAAiB,EACjBC,QAAA,SAAQC,GACH,IAAIH,KAAKG,EAAc,IAAM,IAAIH,MAClCJ,EAAY,IAAII,KAAKG,EAAc,IACnCtC,EAAUC,eAAesB,GAAU,KAGnCgB,EAAAzC,GAAS0C,OAAOC,QAAQ,sCACxBzC,EAAUC,eAAesB,G,IAM/BA,EAASmB,iBAAiB,SAE1B,SAAyBC,GACvBC,QAAQC,IAAI,eACZ,IAAMC,EAAUC,aAAY,WAC1B,IAAMC,EAAW,IAAIb,KAEjBJ,EAAYiB,GACdC,cAAcH,GACd9C,EAAUC,eAAesB,IAO/B,SAAqB2B,EAAWF,GAC9B,GAAGE,GAAaF,EAAS,CACvB,IAAwCG,EAAA1C,EAASE,eAAeuC,EAAYF,GAArE/B,EAAiCkC,EAAjClC,KAAMG,EAA2B+B,EAA3B/B,MAAOC,EAAoB8B,EAApB9B,QAASC,EAAW6B,EAAX7B,QAE7BK,EAAUyB,YAAcnC,EACxBW,EAAWwB,YAAchC,EACzBS,EAAauB,YAAc/B,EAC3BS,EAAasB,YAAc9B,C,EAZzB+B,CAAYtB,EAAWiB,E,GAExB,I","sources":["node_modules/flatpickr/dist/typings.d.ts","src/js/moduls/stylesElement.js","node_modules/notiflix/index.d.ts","src/js/moduls/dateWork.js","src/js/02-timer.js"],"sourcesContent":["import { FlatpickrFn } from \"./types/instance\";\nimport { Instance as _Instance } from \"./types/instance\";\nimport {\n  Options as _Options,\n  Hook as _Hook,\n  HookKey as _HookKey,\n  ParsedOptions as _ParsedOptions,\n  DateLimit as _DateLimit,\n  DateOption as _DateOption,\n  DateRangeLimit as _DateRangeLimit,\n  Plugin as _Plugin,\n} from \"./types/options\";\n\nimport {\n  Locale as _Locale,\n  CustomLocale as _CustomLocale,\n  key as _LocaleKey,\n} from \"./types/locale\";\n\ndeclare var flatpickr: FlatpickrFn;\n\ndeclare namespace flatpickr {\n  export type Instance = _Instance;\n  export type CustomLocale = _CustomLocale;\n  export type Locale = _Locale;\n\n  export namespace Options {\n    export type Options = _Options;\n    export type Hook = _Hook;\n    export type HookKey = _HookKey;\n    export type ParsedOptions = _ParsedOptions;\n    export type DateLimit = _DateLimit;\n    export type DateOption = _DateOption;\n    export type DateRangeLimit = _DateRangeLimit;\n    export type Plugin = _Plugin;\n    export type LocaleKey = _LocaleKey;\n  }\n}\n\nexport default flatpickr;\n","function disableElementList(button, ...buttons) {\n  buttons.forEach((el) => {\n    disableElement(el, false)\n  })\n  disableElement(button, true)\n}\n\nfunction disableElement(button, status = true) {\n  button.disabled = status;\n}\n\nexport const disableEl = {disableElement, disableElementList}","/*\n* Notiflix (https://notiflix.github.io)\n* Version: 3.2.6\n* Description: TypeScript Declaration.\n* Author: Furkan (https://github.com/furcan)\n* Copyright 2019 - 2023 Notiflix, MIT Licence (https://opensource.org/licenses/MIT)\n*/\n\n/**\n  * Notiflix is a pure JavaScript library for client-side non-blocking notifications, popup boxes, loading indicators, and more that makes your web projects much better.\n  * @namespace Notiflix\n  * @memberof Global\n  */\ndeclare namespace Notiflix {\n\n  /**\n   * @interface INotifyOptionsSecondary\n   * @memberof Notiflix\n   */\n  export interface INotifyOptionsSecondary {\n    /**\n     * @property {string} - Changes the background color.\n     * @defaultValue `INotifyOptions.success` => `#32c682`\n     * @defaultValue `INotifyOptions.failure` => `#ff5549`\n     * @defaultValue `INotifyOptions.warning` => `#eebf31`\n     * @defaultValue `INotifyOptions.info` => `#26c0d3`\n     */\n    background?: string;\n\n    /**\n     * @property {string} - Changes the text color.\n     * @defaultValue `INotifyOptions.success` => `#fff`\n     * @defaultValue `INotifyOptions.failure` => `#fff`\n     * @defaultValue `INotifyOptions.warning` => `#fff`\n     * @defaultValue `INotifyOptions.info` => `#fff`\n     */\n    textColor?: string;\n\n    /**\n     * @property {string} - Changes the class name.\n     * @defaultValue `INotifyOptions.success` => `notiflix-notify-success`\n     * @defaultValue `INotifyOptions.failure` => `notiflix-notify-failure`\n     * @defaultValue `INotifyOptions.warning` => `notiflix-notify-warning`\n     * @defaultValue `INotifyOptions.info` => `notiflix-notify-info`\n     */\n    childClassName?: string;\n\n    /**\n     * @property {string} - Changes the built-in SVG icon color.\n     * @defaultValue `INotifyOptions.success` => `rgba(0,0,0,0.2)`\n     * @defaultValue `INotifyOptions.failure` => `rgba(0,0,0,0.2)`\n     * @defaultValue `INotifyOptions.warning` => `rgba(0,0,0,0.2)`\n     * @defaultValue `INotifyOptions.info` => `rgba(0,0,0,0.2)`\n     */\n    notiflixIconColor?: string;\n\n    /**\n     * @property {string} - Changes the FontAwesome icon class name. (FontAwesome has to be added to the project separately.)\n     * @defaultValue `INotifyOptions.success` => `fas fa-check-circle`\n     * @defaultValue `INotifyOptions.failure` => `fas fa-times-circle`\n     * @defaultValue `INotifyOptions.warning` => `fas fa-exclamation-circle`\n     * @defaultValue `INotifyOptions.info` => `fas fa-info-circle`\n     */\n    fontAwesomeClassName?: string;\n\n    /**\n     * @property {string} - Changes the FontAwesome icon color.\n     * @defaultValue `INotifyOptions.success` => `rgba(0,0,0,0.2)`\n     * @defaultValue `INotifyOptions.failure` => `rgba(0,0,0,0.2)`\n     * @defaultValue `INotifyOptions.warning` => `rgba(0,0,0,0.2)`\n     * @defaultValue `INotifyOptions.info` => `rgba(0,0,0,0.2)`\n     */\n    fontAwesomeIconColor?: string;\n\n    /**\n     * @property {string} - Changes the color of the background overlay. (Overrides the common \"backOverlayColor\" option for this notification type. Can be set as an empty string to use the common one.)\n     * @defaultValue `INotifyOptions.success` => `rgba(50,198,130,0.2)`\n     * @defaultValue `INotifyOptions.failure` => `rgba(255,85,73,0.2)`\n     * @defaultValue `INotifyOptions.warning` => `rgba(238,191,49,0.2)`\n     * @defaultValue `INotifyOptions.info` => `rgba(38,192,211,0.2)`\n     */\n    backOverlayColor?: string;\n  }\n\n  /**\n   * @interface INotifyOptions\n   * @memberof Notiflix\n   */\n  export interface INotifyOptions {\n    /**\n     * @property {string} - Changes the width of the notifications.\n     * @defaultValue `280px`\n     */\n    width?: string;\n\n    /**\n     * @property {string} - 7 types of positions can be used: `right-top` `right-bottom` `left-top` `left-bottom` `center-top` `center-bottom` `center-center`\n     * @defaultValue `right-top`\n     */\n    position?: 'right-top' | 'right-bottom' | 'left-top' | 'left-bottom' | 'center-top' | 'center-bottom' | 'center-center';\n\n    /**\n     * @property {string} - The distance between positioned notifications and the `body` element.\n     * @defaultValue `10px`\n     */\n    distance?: string;\n\n    /**\n     * @property {number} - Changes the opacity. (Between 0 and 1)\n     * @defaultValue `1`\n     */\n    opacity?: number;\n\n    /**\n     * @property {string} - Changes the radius of the notifications corners.\n     * @defaultValue `5px`\n     */\n    borderRadius?: string;\n\n    /**\n     * @property {boolean} - Specifies the text direction to \"right-to-left\".\n     * @defaultValue `false`\n     */\n    rtl?: boolean;\n\n    /**\n     * @property {number} - The delay in milliseconds to hide and remove the notifications.\n     * @defaultValue `3000`\n     */\n    timeout?: number;\n\n    /**\n     * @property {number} - The maximum length of the notifications message text.\n     * @defaultValue `110`\n     */\n    messageMaxLength?: number;\n\n    /**\n     * @property {boolean} - Adds a background overlay to the notifications.\n     * @defaultValue `false`\n     */\n    backOverlay?: boolean;\n\n    /**\n     * @property {string} - Changes the color of the background overlay. (Only if the notification type-based \"backOverlayColor\" option is empty string.)\n     * @defaultValue `rgba(0,0,0,0.5)`\n     */\n    backOverlayColor?: string;\n\n    /**\n     * @property {boolean} - Strips all HTML tags.\n     * @defaultValue `true`\n     */\n    plainText?: boolean;\n\n    /**\n     * @property {boolean} - Auto-removes all the notifications except for the last one.\n     * @defaultValue `false`\n     */\n    showOnlyTheLastOne?: boolean;\n\n    /**\n     * @property {boolean} - Removes the notification when it has been clicked without waiting for the delay.\n     * @defaultValue `false`\n     */\n    clickToClose?: boolean;\n\n    /**\n     * @property {boolean} - Auto-remove functionality will be paused for each notification element when the pointer(mouse) enters on it.\n     * @defaultValue `true`\n     */\n    pauseOnHover?: boolean;\n\n    /**\n     * @property {string} - Changes the ID (attribute) of the notifications.\n     * @defaultValue `NotiflixNotify`\n     */\n    ID?: string;\n\n    /**\n     * @property {string} - Changes the class name (attribute) of the notifications.\n     * @defaultValue `notiflix-notify`\n     */\n    className?: string;\n\n    /**\n     * @property {number} - Changes the z-index of the notifications.\n     * @defaultValue `4001`\n     */\n    zindex?: number;\n\n    /**\n     * @property {string} - Changes the font-family of the notifications message text.\n     * @defaultValue `Quicksand`\n     */\n    fontFamily?: string;\n\n    /**\n     * @property {string} - Changes the font-size of the notifications message text.\n     * @defaultValue `13px`\n     */\n    fontSize?: string;\n\n    /**\n     * @property {boolean} - Enables/disables CSS animations to show/hide the notifications.\n     * @defaultValue `true`\n     */\n    cssAnimation?: boolean;\n\n    /**\n     * @property {number} - Changes the CSS animations duration as milliseconds.\n     * @defaultValue `400`\n     */\n    cssAnimationDuration?: number;\n\n    /**\n     * @property {string} - 6 types of styles can be used: `fade` `zoom` `from-right` `from-top` `from-bottom` `from-left`\n     * @defaultValue `fade`\n     */\n    cssAnimationStyle?: 'fade' | 'zoom' | 'from-right' | 'from-top' | 'from-bottom' | 'from-left';\n\n    /**\n     * @property {boolean} - Adds a close button/icon to the notifications. (Notifications with a close button won't disappear until they were clicked.)\n     * @defaultValue `false`\n     */\n    closeButton?: boolean;\n\n    /**\n     * @property {boolean} - Allows using built-in SVG or external FontAwesome icons in the notifications. (By default, built-in SVG icons have been defined.)\n     * @defaultValue `true`\n     */\n    useIcon?: boolean;\n\n    /**\n     * @property {boolean} - Ignores built-in SVG icons and allows to use of external FontAwesome icons.\n     * @defaultValue `false`\n     */\n    useFontAwesome?: boolean;\n\n    /**\n     * @property {string} - 2 types of styles can be used: `basic` `shadow`\n     * @defaultValue `basic`\n     */\n    fontAwesomeIconStyle?: 'basic' | 'shadow';\n\n    /**\n     * @property {string} - Changes the font-size of the FontAwesome icons.\n     * @defaultValue `34px`\n     */\n    fontAwesomeIconSize?: string;\n\n    /**\n     * @property {Object} - The options of the `success` type notifications.\n     * - `Notiflix.INotifyOptionsSecondary`\n     */\n    success?: INotifyOptionsSecondary;\n\n    /**\n     * @property {Object} - The options of the `failure` type notifications.\n     * - `Notiflix.INotifyOptionsSecondary`\n     */\n    failure?: INotifyOptionsSecondary;\n\n    /**\n     * @property {Object} - The options of the `warning` type notifications.\n     * - `Notiflix.INotifyOptionsSecondary`\n     */\n    warning?: INotifyOptionsSecondary;\n\n    /**\n     * @property {Object} - The options of the `info` type notifications.\n     * - `Notiflix.INotifyOptionsSecondary`\n     */\n    info?: INotifyOptionsSecondary;\n  }\n\n\n  /**\n   * @interface IReportOptionsSecondary\n   * @memberof Notiflix\n   */\n  export interface IReportOptionsSecondary {\n    /**\n     * @property {string} - Changes the built-in SVG icon color.\n     * @defaultValue `IReportOptions.success` => `#32c682`\n     * @defaultValue `IReportOptions.failure` => `#ff5549`\n     * @defaultValue `IReportOptions.warning` => `#eebf31`\n     * @defaultValue `IReportOptions.info` => `#26c0d3`\n     */\n    svgColor?: string;\n\n    /**\n     * @property {string} - Changes the title text color.\n     * @defaultValue `IReportOptions.success` => `#1e1e1e`\n     * @defaultValue `IReportOptions.failure` => `#1e1e1e`\n     * @defaultValue `IReportOptions.warning` => `#1e1e1e`\n     * @defaultValue `IReportOptions.info` => `#1e1e1e`\n     */\n    titleColor?: string;\n\n    /**\n     * @property {string} - Changes the message text color.\n     * @defaultValue `IReportOptions.success` => `#242424`\n     * @defaultValue `IReportOptions.failure` => `#242424`\n     * @defaultValue `IReportOptions.warning` => `#242424`\n     * @defaultValue `IReportOptions.info` => `#242424`\n     */\n    messageColor?: string;\n\n    /**\n     * @property {string} - Changes the button background color.\n     * @defaultValue `IReportOptions.success` => `#32c682`\n     * @defaultValue `IReportOptions.failure` => `#ff5549`\n     * @defaultValue `IReportOptions.warning` => `#eebf31`\n     * @defaultValue `IReportOptions.info` => `#26c0d3`\n     */\n    buttonBackground?: string;\n\n    /**\n     * @property {string} - Changes the button text color.\n     * @defaultValue `IReportOptions.success` => `#fff`\n     * @defaultValue `IReportOptions.failure` => `#fff`\n     * @defaultValue `IReportOptions.warning` => `#fff`\n     * @defaultValue `IReportOptions.info` => `#fff`\n     */\n    buttonColor?: string;\n\n    /**\n     * @property {string} - Changes the color of the background overlay. (Overrides the common \"backOverlayColor\" option for this report type. Can be set as an empty string to use the common one.)\n     * @defaultValue `IReportOptions.success` => `rgba(50,198,130,0.2)`\n     * @defaultValue `IReportOptions.failure` => `rgba(255,85,73,0.2)`\n     * @defaultValue `IReportOptions.warning` => `rgba(238,191,49,0.2)`\n     * @defaultValue `IReportOptions.info` => `rgba(38,192,211,0.2)`\n     */\n    backOverlayColor?: string;\n  }\n\n  /**\n   * @interface IReportOptions\n   * @memberof Notiflix\n   */\n  export interface IReportOptions {\n    /**\n     * @property {string} - Changes the class name (attribute).\n     * @defaultValue `notiflix-report`\n     */\n    className?: string;\n\n    /**\n     * @property {string} - Changes the width.\n     * @defaultValue `320px`\n     */\n    width?: string;\n\n    /**\n     * @property {string} - Changes the background color.\n     * @defaultValue `#f8f8f8`\n     */\n    backgroundColor?: string;\n\n    /**\n     * @property {string} - Changes the radius of the corners.\n     * @defaultValue `25px`\n     */\n    borderRadius?: string;\n\n    /**\n     * @property {boolean} - Specifies the text direction to \"right-to-left\".\n     * @defaultValue `false`\n     */\n    rtl?: boolean;\n\n    /**\n     * @property {number} - Changes the z-index.\n     * @defaultValue `4002`\n     */\n    zindex?: number;\n\n    /**\n     * @property {boolean} - Adds a background overlay.\n     * @defaultValue `true`\n     */\n    backOverlay?: boolean;\n\n    /**\n     * @property {string} - Changes the color of the background overlay. (Only if the report type-based \"backOverlayColor\" option is empty string.)\n     * @defaultValue `rgba(0,0,0,0.5)`\n     */\n    backOverlayColor?: string;\n\n    /**\n     * @property {boolean} - Removes the Report Notification when the background overlay element has been clicked. The \"backOverlay\" option has to be \"true\" as well.\n     * @defaultValue `false`\n     */\n    backOverlayClickToClose?: boolean;\n\n    /**\n     * @property {string} - Changes the font-family.\n     * @defaultValue `Quicksand`\n     */\n    fontFamily?: string;\n\n    /**\n     * @property {string} - Changes the built-in SVG icons width and height. (Notiflix uses square scaled icons.)\n     * @defaultValue `110px`\n     */\n    svgSize?: string;\n\n    /**\n     * @property {boolean} - Strips all HTML tags.\n     * @defaultValue `true`\n     */\n    plainText?: boolean;\n\n    /**\n     * @property {string} - Changes the font-size of the title text.\n     * @defaultValue `16px`\n     */\n    titleFontSize?: string;\n\n    /**\n     * @property {number} - The maximum length of the title text.\n     * @defaultValue `34`\n     */\n    titleMaxLength?: number;\n\n    /**\n     * @property {string} - Changes the font-size of the message text.\n     * @defaultValue `13px`\n     */\n    messageFontSize?: string;\n\n    /**\n     * @property {number} - The maximum length of the message text.\n     * @defaultValue `400`\n     */\n    messageMaxLength?: number;\n\n    /**\n     * @property {string} - Changes the font-size of the button text.\n     * @defaultValue `14px`\n     */\n    buttonFontSize?: string;\n\n    /**\n     * @property {number} - The maximum length of the button text.\n     * @defaultValue `34`\n     */\n    buttonMaxLength?: number;\n\n    /**\n     * @property {boolean} - Enables/disables CSS animations to show/hide.\n     * @defaultValue `true`\n     */\n    cssAnimation?: boolean;\n\n    /**\n     * @property {number} - Changes the CSS animations duration as milliseconds.\n     * @defaultValue `360`\n     */\n    cssAnimationDuration?: number;\n\n    /**\n     * @property {string} - 2 types of styles can be used: `fade` `zoom`\n     * @defaultValue `fade`\n     */\n    cssAnimationStyle?: 'fade' | 'zoom';\n\n    /**\n     * @property {Object} - The options of the `success` type.\n     * - `Notiflix.IReportOptionsSecondary`\n     */\n    success?: IReportOptionsSecondary;\n\n    /**\n     * @property {Object} - The options of the `failure` type.\n     * - `Notiflix.IReportOptionsSecondary`\n     */\n    failure?: IReportOptionsSecondary;\n\n    /**\n     * @property {Object} - The options of the `warning` type.\n     * - `Notiflix.IReportOptionsSecondary`\n     */\n    warning?: IReportOptionsSecondary;\n\n    /**\n     * @property {Object} - The options of the `info` type.\n     * - `Notiflix.IReportOptionsSecondary`\n     */\n    info?: IReportOptionsSecondary;\n  }\n\n\n  /**\n   * @interface IConfirmOptions\n   * @memberof Notiflix\n   */\n  export interface IConfirmOptions {\n    /**\n     * @property {string} - Changes the class name (attribute).\n     * @defaultValue `notiflix-confirm`\n     */\n    className?: string;\n\n    /**\n     * @property {string} - Changes the width.\n     * @defaultValue `300px`\n     */\n    width?: string;\n\n    /**\n     * @property {number} - Changes the z-index.\n     * @defaultValue `4003`\n     */\n    zindex?: number;\n\n    /**\n     * @property {string} - 9 types of positions can be used: `center` `center-top` `center-bottom` `right-top` `right-center` `right-bottom` `left-top` `left-center` `left-bottom`\n     * @defaultValue `center`\n     */\n    position?: 'center' | 'center-top' | 'center-bottom' | 'right-top' | 'right-center' | 'right-bottom' | 'left-top' | 'left-center' | 'left-bottom';\n\n    /**\n     * @property {string} - The distance between positioned confirm boxes and the `body` element.\n     * @defaultValue `10px`\n     */\n    distance?: string;\n\n    /**\n     * @property {string} - Changes the background color.\n     * @defaultValue `#f8f8f8`\n     */\n    backgroundColor?: string;\n\n    /**\n     * @property {string} - Changes the radius of the corners.\n     * @defaultValue `25px`\n     */\n    borderRadius?: string;\n\n    /**\n     * @property {boolean} - Adds a background overlay.\n     * @defaultValue `true`\n     */\n    backOverlay?: boolean;\n\n    /**\n     * @property {string} - Changes the color of the background overlay.\n     * @defaultValue `rgba(0,0,0,0.5)`\n     */\n    backOverlayColor?: string;\n\n    /**\n     * @property {boolean} - Specifies the text direction to \"right-to-left\".\n     * @defaultValue `false`\n     */\n    rtl?: boolean;\n\n    /**\n     * @property {string} - Changes the font-family.\n     * @defaultValue `Quicksand`\n     */\n    fontFamily?: string;\n\n    /**\n     * @property {boolean} - Enables/disables CSS animations to show/hide.\n     * @defaultValue `true`\n     */\n    cssAnimation?: boolean;\n\n    /**\n     * @property {number} - Changes the CSS animations duration as milliseconds.\n     * @defaultValue `300`\n     */\n    cssAnimationDuration?: number;\n\n    /**\n     * @property {string} - 2 types of styles can be used: `fade` `zoom`\n     * @defaultValue `fade`\n     */\n    cssAnimationStyle?: 'zoom' | 'fade';\n\n    /**\n     * @property {boolean} - Strips all HTML tags.\n     * @defaultValue `true`\n     */\n    plainText?: boolean;\n\n    /**\n     * @property {string} - Changes the color of the title text.\n     * @defaultValue `#32c682`\n     */\n    titleColor?: string;\n\n    /**\n     * @property {string} - Changes the font-size of the title text.\n     * @defaultValue `16px`\n     */\n    titleFontSize?: string;\n\n    /**\n     * @property {number} - The maximum length of the title text.\n     * @defaultValue `34`\n     */\n    titleMaxLength?: number;\n\n    /**\n     * @property {string} - Changes the color of the message text.\n     * @defaultValue `#1e1e1e`\n     */\n    messageColor?: string;\n\n    /**\n     * @property {string} - Changes the font-size of the message text.\n     * @defaultValue `14px`\n     */\n    messageFontSize?: string;\n\n    /**\n     * @property {number} - The maximum length of the message text.\n     * @defaultValue `110`\n     */\n    messageMaxLength?: number;\n\n    /**\n     * @property {string} - Changes the font-size of the buttons text.\n     * @defaultValue `15px`\n     */\n    buttonsFontSize?: string;\n\n    /**\n     * @property {number} - The maximum length of the buttons text.\n     * @defaultValue `34`\n     */\n    buttonsMaxLength?: number;\n\n    /**\n     * @property {string} - Changes the color of the OK button text.\n     * @defaultValue `#f8f8f8`\n     */\n    okButtonColor?: string;\n\n    /**\n     * @property {string} - Changes the background color of the OK button.\n     * @defaultValue `#32c682`\n     */\n    okButtonBackground?: string;\n\n    /**\n     * @property {string} - Changes the color of the Cancel button text.\n     * @defaultValue `#f8f8f8`\n     */\n    cancelButtonColor?: string;\n\n    /**\n     * @property {string} - Changes the background color of the Cancel button.\n     * @defaultValue `#a9a9a9`\n     */\n    cancelButtonBackground?: string;\n  }\n\n\n  /**\n   * @interface ILoadingOptions\n   * @memberof Notiflix\n   */\n  export interface ILoadingOptions {\n    /**\n     * @property {string} - Changes the class name (attribute).\n     * @defaultValue `notiflix-loading`\n     */\n    className?: string;\n\n    /**\n     * @property {number} - Changes the z-index.\n     * @defaultValue `4000`\n     */\n    zindex?: number;\n\n    /**\n     * @property {string} - Changes the background color.\n     * @defaultValue `rgba(0,0,0,0.8)`\n     */\n    backgroundColor?: string;\n\n    /**\n     * @property {boolean} - Specifies the text direction to \"right-to-left\".\n     * @defaultValue `false`\n     */\n    rtl?: boolean;\n\n    /**\n     * @property {string} - Changes the font-family.\n     * @defaultValue `Quicksand`\n     */\n    fontFamily?: string;\n\n    /**\n     * @property {boolean} - Enables/disables CSS animations to show/hide.\n     * @defaultValue `true`\n     */\n    cssAnimation?: boolean;\n\n    /**\n     * @property {number} - Changes the CSS animations duration as milliseconds.\n     * @defaultValue `400`\n     */\n    cssAnimationDuration?: number;\n\n    /**\n     * @property {boolean} - Removes the loading indicator when it has been clicked.\n     * @defaultValue `false`\n     */\n    clickToClose?: boolean;\n\n    /**\n     * @property {string} - An external SVG icon URL can be set.\n     * @defaultValue `null`\n     * - Usage: `Notiflix.Loading.custom();`\n     */\n    customSvgUrl?: string | null;\n\n    /**\n     * @property {string} - A text-based `string` SVG icon can be set. Single quotation marks should be avoided.\n     * @defaultValue `null`\n     * - Usage: `Notiflix.Loading.custom();`\n     */\n    customSvgCode?: string | null;\n\n    /**\n     * @property {string} - Changes the built-in SVG icons width and height. (Notiflix uses square scaled icons.)\n     * @defaultValue `80px`\n     */\n    svgSize?: string;\n\n    /**\n     * @property {string} - Changes the built-in SVG icons color.\n     * @defaultValue `#32c682`\n     */\n    svgColor?: string;\n\n    /**\n     * @property {string} - Changes the ID (attribute) of the loading message element.\n     * @defaultValue `NotiflixLoadingMessage`\n     */\n    messageID?: string;\n\n    /**\n     * @property {string} - Changes the font-size of the loading message text.\n     * @defaultValue `15px`\n     */\n    messageFontSize?: string;\n\n    /**\n     * @property {number} - The maximum length of the loading message text.\n     * @defaultValue `34`\n     */\n    messageMaxLength?: number;\n\n    /**\n     * @property {string} - Changes the color of the loading message text.\n     * @defaultValue `#dcdcdc`\n     */\n    messageColor?: string;\n  }\n\n\n  /**\n   * @interface IBlockOptions\n   * @memberof Notiflix\n   */\n  export interface IBlockOptions {\n    /**\n     * @property {number} - Limit of the CSS selector(s) or \"`Array<HTMLElement>`\" or \"`NodeListOf<HTMLElement>`\" length.\n     * @defaultValue `200`\n     */\n    querySelectorLimit?: number;\n\n    /**\n     * @property {string} - Changes the class name (attribute) of the block indicator/message elements wrapper.\n     * @defaultValue `notiflix-block`\n     */\n    className?: string;\n\n    /**\n     * @property {string} - Changes the position of the block indicator/message elements wrapper.\n     * @defaultValue `absolute`\n     */\n    position?: string;\n\n    /**\n     * @property {number} - Changes the z-index of the block indicator/message elements wrapper.\n     * @defaultValue `1000`\n     */\n    zindex?: number;\n\n    /**\n     * @property {string} - Changes the background color the block indicator/message elements wrapper.\n     * @defaultValue `rgba(255,255,255,0.9)`\n     */\n    backgroundColor?: string;\n\n    /**\n     * @property {boolean} - Specifies the text direction to \"right-to-left\".\n     * @defaultValue `false`\n     */\n    rtl?: boolean;\n\n    /**\n     * @property {string} - Changes the font-family.\n     * @defaultValue `Quicksand`\n     */\n    fontFamily?: string;\n\n    /**\n     * @property {boolean} - Enables/disables CSS animations to show/hide.\n     * @defaultValue `true`\n     */\n    cssAnimation?: boolean;\n\n    /**\n     * @property {number} - Changes the CSS animations duration as milliseconds.\n     * @defaultValue `300`\n     */\n    cssAnimationDuration?: number;\n\n    /**\n     * @property {string} - Changes the built-in SVG icons width and height. (Notiflix uses square scaled icons.)\n     * @defaultValue `45px`\n     */\n    svgSize?: string;\n\n    /**\n     * @property {string} - Changes the built-in SVG icons color.\n     * @defaultValue `#383838`\n     */\n    svgColor?: string;\n\n    /**\n     * @property {string} - Changes the font-size of the block message text.\n     * @defaultValue `14px`\n     */\n    messageFontSize?: string;\n\n    /**\n     * @property {number} - The maximum length of the block message text.\n     * @defaultValue `34`\n     */\n    messageMaxLength?: number;\n\n    /**\n     * @property {string} - Changes the color of the block message text.\n     * @defaultValue `#383838`\n     */\n    messageColor?: string;\n  }\n\n\n  /**\n   * Notify is a namespace in Notiflix (Notiflix.Notify)\n   * @namespace Notify\n   * @memberof Notiflix\n   */\n  export namespace Notify {\n    /**\n     * This method can be used to set custom options globally for the Notify module.\n     * @function init\n     * @memberof Notiflix.Notify\n     * @param {Object} options - Optional, `Notiflix.INotifyOptions`.\n     */\n    function init(options: INotifyOptions): void;\n\n    /**\n     * This method can be used to deeply extend the `Notify.init()` options for a specific page or event globally.\n     * @function merge\n     * @memberof Notiflix.Notify\n     * @param {Object} extendOptions - Optional, `Notiflix.INotifyOptions`.\n     */\n    function merge(extendOptions: INotifyOptions): void;\n\n    /**\n     * This method can be used to send the `success` type notifications.\n     * @function success\n     * @memberof Notiflix.Notify\n     * @param {string} message - Required, a text in string format.\n     * @param {function | Object} callbackOrOptions - Optional, a callback function that will be called when the notification element has been clicked. Or, extending the initialize options with the new options for each notification element.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each notification element. (If the second parameter has been already used for a callback function.)\n     */\n    function success(\n      message: string,\n      callbackOrOptions?: (() => void) | INotifyOptions,\n      options?: INotifyOptions,\n    ): void;\n\n    /**\n     * This method can be used to send the `failure` type notifications.\n     * @function failure\n     * @memberof Notiflix.Notify\n     * @param {string} message - Required, a text in string format.\n     * @param {function | Object} callbackOrOptions - Optional, a callback function that will be called when the notification element has been clicked. Or, extending the initialize options with the new options for each notification element.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each notification element. (If the second parameter has been already used for a callback function.)\n     */\n    function failure(\n      message: string,\n      callbackOrOptions?: (() => void) | INotifyOptions,\n      options?: INotifyOptions,\n    ): void;\n\n    /**\n     * This method can be used to send the `warning` type notifications.\n     * @function warning\n     * @memberof Notiflix.Notify\n     * @param {string} message - Required, a text in string format.\n     * @param {function | Object} callbackOrOptions - Optional, a callback function that will be called when the notification element has been clicked. Or, extending the initialize options with the new options for each notification element.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each notification element. (If the second parameter has been already used for a callback function.)\n     */\n    function warning(\n      message: string,\n      callbackOrOptions?: (() => void) | INotifyOptions,\n      options?: INotifyOptions,\n    ): void;\n\n    /**\n     * This method can be used to send the `info` type notifications.\n     * @function info\n     * @memberof Notiflix.Notify\n     * @param {string} message - Required, a text in string format.\n     * @param {function | Object} callbackOrOptions - Optional, a callback function that will be called when the notification element has been clicked. Or, extending the initialize options with the new options for each notification element.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each notification element. (If the second parameter has been already used for a callback function.)\n     */\n    function info(\n      message: string,\n      callbackOrOptions?: (() => void) | INotifyOptions,\n      options?: INotifyOptions,\n    ): void;\n  }\n\n\n  /**\n   * Report is a namespace in Notiflix (Notiflix.Report)\n   * @namespace Report\n   * @memberof Notiflix\n   */\n  export namespace Report {\n    /**\n     * This method can be used to set custom options globally for the Report module.\n     * @function init\n     * @memberof Notiflix.Report\n     * @param {Object} options - Optional, `Notiflix.IReportOptions`.\n     */\n    function init(options: IReportOptions): void;\n\n    /**\n     * This method can be used to deeply extend the `Report.init()` options for a specific page or event globally.\n     * @function merge\n     * @memberof Notiflix.Report\n     * @param {Object} extendOptions - Optional, `Notiflix.IReportOptions`.\n     */\n    function merge(extendOptions: IReportOptions): void;\n\n    /**\n     * This method can be used to send the `success` type extended notifications that contain a title, description, and button(with a callback function).\n     * @function success\n     * @memberof Notiflix.Report\n     * @param {string} title - Required, title text in string format.\n     * @param {string} message - Required, message text in string format.\n     * @param {string} buttonText - Required, button text in string format.\n     * @param {function | Object} callbackOrOptions - Optional, a callback function that will be called when the button element has been clicked. Or, extending the initialize options with the new options for each notification element.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each notification element. (If the fourth parameter has been already used for a callback function.)\n     */\n    function success(\n      title: string,\n      message: string,\n      buttonText: string,\n      callbackOrOptions?: (() => void) | IReportOptions,\n      options?: IReportOptions,\n    ): void;\n\n    /**\n     * This method can be used to send the `failure` type extended notifications that contain a title, description, and button(with a callback function).\n     * @function failure\n     * @memberof Notiflix.Report\n     * @param {string} title - Required, title text in string format.\n     * @param {string} message - Required, message text in string format.\n     * @param {string} buttonText - Required, button text in string format.\n     * @param {function | Object} callbackOrOptions - Optional, a callback function that will be called when the button element has been clicked. Or, extending the initialize options with the new options for each notification element.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each notification element. (If the fourth parameter has been already used for a callback function.)\n     */\n    function failure(\n      title: string,\n      message: string,\n      buttonText: string,\n      callbackOrOptions?: (() => void) | IReportOptions,\n      options?: IReportOptions,\n    ): void;\n\n    /**\n     * This method can be used to send the `warning` type extended notifications that contain a title, description, and button(with a callback function).\n     * @function warning\n     * @memberof Notiflix.Report\n     * @param {string} title - Required, title text in string format.\n     * @param {string} message - Required, message text in string format.\n     * @param {string} buttonText - Required, button text in string format.\n     * @param {function | Object} callbackOrOptions - Optional, a callback function that will be called when the button element has been clicked. Or, extending the initialize options with the new options for each notification element.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each notification element. (If the fourth parameter has been already used for a callback function.)\n     */\n    function warning(\n      title: string,\n      message: string,\n      buttonText: string,\n      callbackOrOptions?: (() => void) | IReportOptions,\n      options?: IReportOptions,\n    ): void;\n\n    /**\n     * This method can be used to send the `info` type extended notifications that contain a title, description, and button(with a callback function).\n     * @function info\n     * @memberof Notiflix.Report\n     * @param {string} title - Required, title text in string format.\n     * @param {string} message - Required, message text in string format.\n     * @param {string} buttonText - Required, button text in string format.\n     * @param {function | Object} callbackOrOptions - Optional, a callback function that will be called when the button element has been clicked. Or, extending the initialize options with the new options for each notification element.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each notification element. (If the fourth parameter has been already used for a callback function.)\n     */\n    function info(\n      title: string,\n      message: string,\n      buttonText: string,\n      callbackOrOptions?: (() => void) | IReportOptions,\n      options?: IReportOptions,\n    ): void;\n  }\n\n\n  /**\n   * Confirm is a namespace in Notiflix (Notiflix.Confirm)\n   * @namespace Confirm\n   * @memberof Notiflix\n   */\n  export namespace Confirm {\n    /**\n     * This method can be used to set custom options globally for the Confirm module.\n     * @function init\n     * @memberof Notiflix.Confirm\n     * @param {Object} options - Optional, `Notiflix.IConfirmOptions`.\n     */\n    function init(options: IConfirmOptions): void;\n\n    /**\n     * This method can be used to deeply extend the `Confirm.init()` options for a specific page or event globally.\n     * @function merge\n     * @memberof Notiflix.Confirm\n     * @param {Object} extendOptions - Optional, `Notiflix.IConfirmOptions`.\n     */\n    function merge(extendOptions: IConfirmOptions): void;\n\n    /**\n     * This method can be used to show a confirm box with info, and take the custom actions via the callback functions.\n     * @function show\n     * @memberof Notiflix.Confirm\n     * @param {string} title - Required, title text in string format.\n     * @param {string} message - Required, message/question in string format.\n     * @param {string} okButtonText - Required, OK button text in string format.\n     * @param {string} cancelButtonText - Optional, Cancel button text in string format.\n     * @param {function} okButtonCallback - Optional, a callback function that will be called when the OK button element has been clicked.\n     * @param {function} cancelButtonCallback - Optional, a callback function that will be called when the Cancel button element has been clicked.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each confirm box.\n     */\n    function show(\n      title: string,\n      message: string,\n      okButtonText: string,\n      cancelButtonText?: string,\n      okButtonCallback?: () => void,\n      cancelButtonCallback?: () => void,\n      options?: IConfirmOptions,\n    ): void;\n\n    /**\n     * This method can be used to ask a question within a confirm box. The confirm box doesn't remove till the client gives the correct answer. Or, the client can click on the cancel button to close/remove the confirm box as well.\n     * @function ask\n     * @memberof Notiflix.Confirm\n     * @param {string} title - Required, title text in string format.\n     * @param {string} question - Required, question text in string format.\n     * @param {string} answer - Required, answer text in string format.\n     * @param {string} okButtonText - Required, OK button text in string format.\n     * @param {string} cancelButtonText - Optional, Cancel button text in string format.\n     * @param {function} okButtonCallback - Optional, a callback function that will be called when the OK button element has been clicked.\n     * @param {function} cancelButtonCallback - Optional, a callback function that will be called when the Cancel button element has been clicked.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each confirm box.\n     */\n    function ask(\n      title: string,\n      question: string,\n      answer: string,\n      okButtonText: string,\n      cancelButtonText?: string,\n      okButtonCallback?: () => void,\n      cancelButtonCallback?: () => void,\n      options?: IConfirmOptions,\n    ): void;\n\n    /**\n     * This method works similarly as `window.prompt()`. The client doesn't have to type a correct answer to the input element to proceed unlike the `Confirm.ask();` method. The client answer passes to the callback functions as a parameter and this parameter is always a `string`.\n     * @function prompt\n     * @memberof Notiflix.Confirm\n     * @param {string} title - Required, title text in string format.\n     * @param {string} question - Required, question text in string format.\n     * @param {string} defaultAnswer - Required, default answer text in string format. An empty string can be used as well.\n     * @param {string} okButtonText - Optional, Cancel button text in string format.\n     * @param {function} cancelButtonText - Optional, a callback function that will be called when the OK button element has been clicked.\n     * @param {function} cancelButtonCallback - Optional, a callback function that will be called when the Cancel button element has been clicked.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each confirm box.\n     */\n    function prompt(\n      title: string,\n      question: string,\n      defaultAnswer: string,\n      okButtonText: string,\n      cancelButtonText?: string,\n      okButtonCallback?: (clientAnswer: string) => void,\n      cancelButtonCallback?: (clientAnswer: string) => void,\n      options?: IConfirmOptions,\n    ): void;\n  }\n\n\n  /**\n   * Loading is a namespace in Notiflix (Notiflix.Loading)\n   * @namespace Loading\n   * @memberof Notiflix\n   */\n  export namespace Loading {\n    /**\n     * This method can be used to set custom options globally for the Loading module.\n     * @function init\n     * @memberof Notiflix.Loading\n     * @param {Object} options - Optional, `Notiflix.ILoadingOptions`.\n     */\n    function init(options: ILoadingOptions): void;\n\n    /**\n     * This method can be used to deeply extend the `Loading.init()` options for a specific page or event globally.\n     * @function merge\n     * @memberof Notiflix.Loading\n     * @param {Object} extendOptions - Optional, `Notiflix.ILoadingOptions`.\n     */\n    function merge(extendOptions: ILoadingOptions): void;\n\n    /**\n     * This method can be used to show the `standard` type loading indicator.\n     * @function standard\n     * @memberof Notiflix.Loading\n     * @param {string | Object} messageOrOptions - Optional, a message in string format. Or, extending the initialize options with the new options for each loading indicator.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each loading indicator. (If the first parameter has been already used for a message.)\n     */\n    function standard(\n      messageOrOptions?: string | ILoadingOptions,\n      options?: ILoadingOptions,\n    ): void;\n\n    /**\n     * This method can be used to show the `hourglass` type loading indicator.\n     * @function hourglass\n     * @memberof Notiflix.Loading\n     * @param {string | Object} messageOrOptions - Optional, a message in string format. Or, extending the initialize options with the new options for each loading indicator.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each loading indicator. (If the first parameter has been already used for a message.)\n     */\n    function hourglass(\n      messageOrOptions?: string | ILoadingOptions,\n      options?: ILoadingOptions,\n    ): void;\n\n    /**\n     * This method can be used to show the `circle` type loading indicator.\n     * @function circle\n     * @memberof Notiflix.Loading\n     * @param {string | Object} messageOrOptions - Optional, a message in string format. Or, extending the initialize options with the new options for each loading indicator.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each loading indicator. (If the first parameter has been already used for a message.)\n     */\n    function circle(\n      messageOrOptions?: string | ILoadingOptions,\n      options?: ILoadingOptions,\n    ): void;\n\n    /**\n     * This method can be used to show the `arrows` type loading indicator.\n     * @function arrows\n     * @memberof Notiflix.Loading\n     * @param {string | Object} messageOrOptions - Optional, a message in string format. Or, extending the initialize options with the new options for each loading indicator.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each loading indicator. (If the first parameter has been already used for a message.)\n     */\n    function arrows(\n      messageOrOptions?: string | ILoadingOptions,\n      options?: ILoadingOptions,\n    ): void;\n\n    /**\n     * This method can be used to show the `dots` type loading indicator.\n     * @function dots\n     * @memberof Notiflix.Loading\n     * @param {string | Object} messageOrOptions - Optional, a message in string format. Or, extending the initialize options with the new options for each loading indicator.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each loading indicator. (If the first parameter has been already used for a message.)\n     */\n    function dots(\n      messageOrOptions?: string | ILoadingOptions,\n      options?: ILoadingOptions,\n    ): void;\n\n    /**\n     * This method can be used to show the `pulse` type loading indicator.\n     * @function pulse\n     * @memberof Notiflix.Loading\n     * @param {string | Object} messageOrOptions - Optional, a message in string format. Or, extending the initialize options with the new options for each loading indicator.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each loading indicator. (If the first parameter has been already used for a message.)\n     */\n    function pulse(\n      messageOrOptions?: string | ILoadingOptions,\n      options?: ILoadingOptions,\n    ): void;\n\n    /**\n     * This method can be used to show the `custom` type loading indicator.\n     * - `customSvgUrl` or `customSvgCode` options are required.\n     * @function custom\n     * @memberof Notiflix.Loading\n     * @param {string | Object} messageOrOptions - Optional, a message in string format. Or, extending the initialize options with the new options for each loading indicator.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each loading indicator. (If the first parameter has been already used for a message.)\n     */\n    function custom(\n      messageOrOptions?: string | ILoadingOptions,\n      options?: ILoadingOptions,\n    ): void;\n\n    /**\n     * This method can be used to show the `notiflix` type loading indicator.\n     * @function notiflix\n     * @memberof Notiflix.Loading\n     * @param {string | Object} messageOrOptions - Optional, a message in string format. Or, extending the initialize options with the new options for each loading indicator.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each loading indicator. (If the first parameter has been already used for a message.)\n     */\n    function notiflix(\n      messageOrOptions?: string | ILoadingOptions,\n      options?: ILoadingOptions,\n    ): void;\n\n    /**\n     * This method can be used to remove the existing loading indicator. (Type of the existing loading indicator does not matter.)\n     * @function remove\n     * @memberof Notiflix.Loading\n     * @param {number} delay - Optional, milliseconds for delaying in number format.\n     */\n    function remove(delay?: number): void;\n\n    /**\n     * This method can be used to change the existing loading indicator message text if exist. (Type of the existing loading indicator does not matter.)\n     * @function change\n     * @memberof Notiflix.Loading\n     * @param {string} newMessage - Required, new message in string format.\n     */\n    function change(newMessage: string): void;\n  }\n\n\n  /**\n   * Block is a namespace in Notiflix (Notiflix.Block)\n   * @namespace Block\n   * @memberof Notiflix\n   */\n  export namespace Block {\n    /**\n     * This method can be used to set custom options globally for the Block module.\n     * @function init\n     * @memberof Notiflix.Block\n     * @param {Object} options - Optional, `Notiflix.IBlockOptions`.\n     */\n    function init(options: IBlockOptions): void;\n\n    /**\n     * This method can be used to deeply extend the `Block.init()` options for a specific page or event globally.\n     * @function merge\n     * @memberof Notiflix.Block\n     * @param {Object} extendOptions - Optional, `Notiflix.IBlockOptions`.\n     */\n    function merge(extendOptions: IBlockOptions): void;\n\n    /**\n     * This method can be used to block the selected element(s) using a `standard` type loading indicator.\n     * @function standard\n     * @memberof Notiflix.Block\n     * @param {string | Array<HTMLElement> | NodeListOf<HTMLElement>} selectorOrHTMLElements - Required, CSS selector(s) that matches the element(s) or \"Array of HTMLElments\" or \"NodeListOf HTMLElments\" to block.\n     * @param {string | Object} messageOrOptions - Optional, a blocking message in string format. Or, extending the initialize options with the new options for each block element.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each block element. (If the second parameter has been already used for a blocking message.)\n     */\n    function standard(\n      selectorOrHTMLElements: string | HTMLElement[] | NodeListOf<HTMLElement>,\n      messageOrOptions?: string | IBlockOptions,\n      options?: IBlockOptions,\n    ): void;\n\n    /**\n     * This method can be used to block the selected element(s) using a `hourglass` type loading indicator.\n     * @function hourglass\n     * @memberof Notiflix.Block\n     * @param {string | Array<HTMLElement> | NodeListOf<HTMLElement>} selectorOrHTMLElements - Required, CSS selector(s) that matches the element(s) or \"Array of HTMLElments\" or \"NodeListOf HTMLElments\" to block.\n     * @param {string | Object} messageOrOptions - Optional, a blocking message in string format. Or, extending the initialize options with the new options for each block element.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each block element. (If the second parameter has been already used for a blocking message.)\n     */\n    function hourglass(\n      selectorOrHTMLElements: string | HTMLElement[] | NodeListOf<HTMLElement>,\n      messageOrOptions?: string | IBlockOptions,\n      options?: IBlockOptions,\n    ): void;\n\n    /**\n     * This method can be used to block the selected element(s) using a `circle` type loading indicator.\n     * @function circle\n     * @memberof Notiflix.Block\n     * @param {string | Array<HTMLElement> | NodeListOf<HTMLElement>} selectorOrHTMLElements - Required, CSS selector(s) that matches the element(s) or \"Array of HTMLElments\" or \"NodeListOf HTMLElments\" to block.\n     * @param {string | Object} messageOrOptions - Optional, a blocking message in string format. Or, extending the initialize options with the new options for each block element.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each block element. (If the second parameter has been already used for a blocking message.)\n     */\n    function circle(\n      selectorOrHTMLElements: string | HTMLElement[] | NodeListOf<HTMLElement>,\n      messageOrOptions?: string | IBlockOptions,\n      options?: IBlockOptions,\n    ): void;\n\n    /**\n     * This method can be used to block the selected element(s) using a `arrows` type loading indicator.\n     * @function arrows\n     * @memberof Notiflix.Block\n     * @param {string | Array<HTMLElement> | NodeListOf<HTMLElement>} selectorOrHTMLElements - Required, CSS selector(s) that matches the element(s) or \"Array of HTMLElments\" or \"NodeListOf HTMLElments\" to block.\n     * @param {string | Object} messageOrOptions - Optional, a blocking message in string format. Or, extending the initialize options with the new options for each block element.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each block element. (If the second parameter has been already used for a blocking message.)\n     */\n    function arrows(\n      selectorOrHTMLElements: string | HTMLElement[] | NodeListOf<HTMLElement>,\n      messageOrOptions?: string | IBlockOptions,\n      options?: IBlockOptions,\n    ): void;\n\n    /**\n     * This method can be used to block the selected element(s) using a `dots` type loading indicator.\n     * @function dots\n     * @memberof Notiflix.Block\n     * @param {string | Array<HTMLElement> | NodeListOf<HTMLElement>} selectorOrHTMLElements - Required, CSS selector(s) that matches the element(s) or \"Array of HTMLElments\" or \"NodeListOf HTMLElments\" to block.\n     * @param {string | Object} messageOrOptions - Optional, a blocking message in string format. Or, extending the initialize options with the new options for each block element.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each block element. (If the second parameter has been already used for a blocking message.)\n     */\n    function dots(\n      selectorOrHTMLElements: string | HTMLElement[] | NodeListOf<HTMLElement>,\n      messageOrOptions?: string | IBlockOptions,\n      options?: IBlockOptions,\n    ): void;\n\n    /**\n     * This method can be used to block the selected element(s) using a `pulse` type loading indicator.\n     * @function pulse\n     * @memberof Notiflix.Block\n     * @param {string | Array<HTMLElement> | NodeListOf<HTMLElement>} selectorOrHTMLElements - Required, CSS selector(s) that matches the element(s) or \"Array of HTMLElments\" or \"NodeListOf HTMLElments\" to block.\n     * @param {string | Object} messageOrOptions - Optional, a blocking message in string format. Or, extending the initialize options with the new options for each block element.\n     * @param {Object} options - Optional, extending the initialize options with new the options for each block element. (If the second parameter has been already used for a blocking message.)\n     */\n    function pulse(\n      selectorOrHTMLElements: string | HTMLElement[] | NodeListOf<HTMLElement>,\n      messageOrOptions?: string | IBlockOptions,\n      options?: IBlockOptions,\n    ): void;\n\n    /**\n     * This method can be used to unblock the selected element(s). (Type of the existing loading indicator does not matter.)\n     * @function remove\n     * @memberof Notiflix.Block\n     * @param {string | Array<HTMLElement> | NodeListOf<HTMLElement>} selectorOrHTMLElements - Required, CSS selector(s) that matches the element(s) or \"Array of HTMLElments\" or \"NodeListOf HTMLElments\" to unblock.\n     * @param {number} delay - Optional, milliseconds for delaying in number format.\n     */\n    function remove(\n      selectorOrHTMLElements: string | HTMLElement[] | NodeListOf<HTMLElement>,\n      delay?: number,\n    ): void;\n  }\n\n}\n\nexport = Notiflix;\nexport as namespace Notiflix;\n","export function convertMsToObj(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nexport default dateWorker = {convertMsToObj}","// Описаний в документації\nimport flatpickr from \"../../node_modules/flatpickr/dist/typings.d.ts\";\nimport Notiflix from '../../node_modules/notiflix/index.d.ts';\n// Додатковий імпорт стилів\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport { disableEl } from \"./moduls/stylesElement\";\nimport dateWork from \"./moduls/dateWork\";\n\n\nconst startBtn = document.querySelector('button[data-start]');\nconst myDatetimePicker = document.querySelector('#datetime-picker');\n\nconst daysLabel = document.querySelector('.timer>.field>.value[data-days]');\nconst hoursLabel = document.querySelector('.timer>.field>.value[data-hours]');\nconst minutesLabel = document.querySelector('.timer>.field>.value[data-minutes]');\nconst secondsLabel = document.querySelector('.timer>.field>.value[data-seconds]');\n\n\nlet finalDate = null;\nstartBtn.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if(new Date(selectedDates[0]) > new Date()){\n      finalDate = new Date(selectedDates[0])\n      disableEl.disableElement(startBtn, false)\n    } else {\n      // window.alert(\"Please choose a date in the future\")\n      Notiflix.Notify.warning('Please choose a date in the future');\n      disableEl.disableElement(startBtn)\n    }\n  },\n};\nflatpickr(myDatetimePicker, options);\n\nstartBtn.addEventListener('click', onStartBtnClick)\n\nfunction onStartBtnClick(e) {\n  console.log(\"press stare\");  \n  const timerId = setInterval(() => {\n    const thisDate = new Date;\n\n    if (finalDate < thisDate) {\n      clearInterval(timerId)\n      disableEl.disableElement(startBtn)\n    } else {\n      updateTimer(finalDate, thisDate); \n    }       \n  }, 1000);\n}\n\nfunction updateTimer(finalDate, thisDate) {\n  if(finalDate >= thisDate){\n    const {days, hours, minutes, seconds} = dateWork.convertMsToObj(finalDate - thisDate)\n\n    daysLabel.textContent = days;\n    hoursLabel.textContent = hours;\n    minutesLabel.textContent = minutes;\n    secondsLabel.textContent = seconds;\n  }\n}"],"names":["$b5ea901bd5622a4f$export$2e2bcd8739ae039","flatpickr","$ff940678987e7af6$var$disableElement","button","status","arguments","length","disabled","$a2ea4319e244c5d3$exports","Notiflix","$ff940678987e7af6$export$14a1c792fa72efcf","disableElement","disableElementList","_len","buttons","Array","_key","forEach","el","$8bf43e969689e062$export$2e2bcd8739ae039","dateWorker","convertMsToObj","ms","minute","second","hour","day","days","Math","floor","hours","minutes","seconds","$84b9dae4df53835d$var$startBtn","document","querySelector","$84b9dae4df53835d$var$myDatetimePicker","$84b9dae4df53835d$var$daysLabel","$84b9dae4df53835d$var$hoursLabel","$84b9dae4df53835d$var$minutesLabel","$84b9dae4df53835d$var$secondsLabel","$84b9dae4df53835d$var$finalDate","enableTime","time_24hr","defaultDate","Date","minuteIncrement","onClose","selectedDates","$parcel$interopDefault","Notify","warning","addEventListener","e","console","log","timerId","setInterval","thisDate","clearInterval","finalDate1","ref","textContent","$84b9dae4df53835d$var$updateTimer"],"version":3,"file":"02-timer.c275e412.js.map"}